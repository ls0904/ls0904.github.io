{"meta":{"title":"星空下的颗粒","subtitle":"流星的划过，留下那幻梦似般的轨迹，为了成为独当一面的·Web·前端工程师！","description":"让自己在这个博客里面记录自己的一些见解，一些在代码中的疑难以及收获。","author":"Ls-tomatoes","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-06-04T05:04:20.000Z","updated":"2019-06-15T01:09:25.254Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-06-04T05:01:12.000Z","updated":"2019-06-15T01:08:16.519Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2018-12-12T13:25:30.000Z","updated":"2019-06-15T01:10:20.470Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"garlly","date":"2019-06-15T02:34:03.000Z","updated":"2019-06-15T02:34:31.102Z","comments":true,"path":"garlly/index.html","permalink":"http://yoursite.com/garlly/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-06-04T05:03:49.000Z","updated":"2019-06-15T01:08:47.768Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"react入门","slug":"react入门","date":"2019-06-17T13:43:08.000Z","updated":"2019-06-22T06:41:08.342Z","comments":true,"path":"2019/06/17/react-ru-men/","link":"","permalink":"http://yoursite.com/2019/06/17/react-ru-men/","excerpt":"","text":"JSX简介 const element = &lt;h1>Hello, world!&lt;/h1>; 这个有趣得标签语法就叫JSX，是一个 JavaScript的语法扩展。在React中配合使用JSX，JSX可以很好地描述UI应该呈现出它应有的交互的本质形式。它具有JavaScript全部的功能。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"react","slug":"react","permalink":"http://yoursite.com/categories/react/"}],"tags":[{"name":"-react","slug":"react","permalink":"http://yoursite.com/tags/react/"}]},{"title":"React中类组件与函数组件的区别","slug":"React类组件与函数组件的区别","date":"2018-06-19T13:55:09.000Z","updated":"2019-06-22T06:41:08.340Z","comments":true,"path":"2018/06/19/react-lei-zu-jian-yu-han-shu-zu-jian-de-qu-bie/","link":"","permalink":"http://yoursite.com/2018/06/19/react-lei-zu-jian-yu-han-shu-zu-jian-de-qu-bie/","excerpt":"","text":"class Hello extends React.Component { // 用类组件定义一个Hello组件 constructor (props){ super(props); this.state = { }; }; }; render () { return( ) } function Welcome(props) { //用函数组件定义个一个Welcome组件 return &lt;h1>Hello, {props.name}&lt;/h1>; } 函数组件看似只是一个返回值是DOM结构的函数，其实它的背后是无状态组件（Stateless Components）的思想。函数组件中，你无法使用State，也无法使用组件的生命周期方法，这就决定了函数组件都是展示性组件（Presentational Components），接收Props，渲染DOM，而不关注其他逻辑。 函数组件中没有this。所以你再也不需要考虑this带来的烦恼。而在类组件中，你依然要记得绑定this这个琐碎的事情。而要想改变类组件中this得指向，你需要用bing方法去修改，而不能使用apply、call方法。因为后者会立即执行，只有bind是返回一个回调函数。 函数组件更容易理解。当你看到一个函数组件时，你就知道它的功能只是接收属性，渲染页面，它不执行与UI无关的逻辑处理，它只是一个纯函数。而不用在意它返回的DOM结构有多复杂。 性能。目前React还是会把函数组件在内部转换成类组件，所以使用函数组件和使用类组件在性能上并无大的差异。但是，React官方已承诺，未来将会优化函数组件的性能，因为函数组件不需要考虑组件状态和组件生命周期方法中的各种比较校验，所以有很大的性能提升空间。 函数组件迫使你思考最佳实践。这是最重要的一点。组件的主要职责是UI渲染，理想情况下，所有的组件都是展示性组件，每个页面都是由这些展示性组件组合而成。如果一个组件是函数组件，那么它当然满足这个要求。所以牢记函数组件的概念，可以让你在写组件时，先思考这个组件应不应该是展示性组件。更多的展示性组件意味着更多的组件有更简洁的结构，更多的组件能被更好的复用。 类组件可以帮帮助我们实现动态数据的渲染，本身使用得JSX语法可以采用虚拟DOM得方法减少去操作真实DOM得操作可以达到性能优化得作用，同时也可以提高组件得复用性。 是由用类组件还是函数组件你可以按照自己得需求来，当你需要动态得去渲染数据得时候那么你就该用类组件了。如果你只需要去实现某个属性那么你可以考虑用函数组件更为简单一些。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"React","slug":"React","permalink":"http://yoursite.com/categories/React/"}],"tags":[{"name":"-react","slug":"react","permalink":"http://yoursite.com/tags/react/"}]},{"title":"一步步认识Vuex","slug":"一步步认识Vuex","date":"2018-03-22T06:51:26.000Z","updated":"2019-06-22T08:13:41.197Z","comments":true,"path":"2018/03/22/yi-bu-bu-ren-shi-vuex/","link":"","permalink":"http://yoursite.com/2018/03/22/yi-bu-bu-ren-shi-vuex/","excerpt":"","text":"如图，Vuex看起来是一个仓库，一层一层得关系牵连，其实它就是一个专为vue.js管理得仓库。 一、为什么需要使用Vuex呢？​ 1、项目越写越大，功能越写越复杂，当vue.js应用程序遇到多个组件共享状态时，单向数据流得简洁性很容易被破坏。 ​ 2、组件之间通信很复杂得情况下 ​ 3、项目中使用了路由，并且路由页面组件中需要通信得时候。 ​ 4、项目遇到难点，写不下去得时候就该用vuex了。 二、Vuex的操作流程：​ 1、要先创建仓库，将我们项目中组件上需要恭喜的数据放置到我们仓库中state的位置/ ​ 2、组件要使用仓库中state的数据，就从仓库里面拿出来用。 ​ 3、要修改仓库中state的数据， ​ 1、commit(提交) mutation ​ 2、dispath（派发） action -> commit mutation ​ 4、然后仓库中state数据发生变化，组件就会得到更新 vuex的使用：​ 1、安装vuex npm install --save vuex ​ 2、项目src/store/index.js文件中创建仓库的实例对象 ​ 3、要main.js中new Vue实例的地方 配置一个store的选项，选项的值就是第二步中实例的对象。 三、如何将仓库中的数据拿到组件中去使用​ this.$store就是仓库的实例对象 ​ 1、直接使用this,$store的方式在组件template模板中使用（不推荐） ​ 2、组件中使用计算属性去拿仓库的数据 ​ 3、借助vuex提供的辅助函数mapState ​ mapState([ ])组件的Computed的key必须要跟State中的key一致 ​ mapState ({ })-组件的Computed的key可以自定义如 ​ 4、将组件自身的computed与State的computed结合 …为展开运算符 computed: { ...mapState(['title']), firstName () { return this.name.split('')[0] } }, 四、如何修改仓库中的数据 先需要在仓库中定义我们的mutation 在组件中提交这个mutaion this.$store.commit(‘mutaion的名字’, 要传递的参数) this.$store.commit({ type: mutaion的名字, 其余的参数 }) mapMutations 辅助函数 mutation不允许异步代码的 五、如何在仓库中 写异步代码 (actions) 每一个action里面都可以写异步代码，但是action并不能修改state中的数据，真正修改数据的还是 mutaction 在组件中如何派发这个action this.$store.dispatch(‘action的名字’) 借助mapActions 辅助函数 至此，vuex中的常用的一些入门知识使用算是简单的分享完了，当然了，相信这些只是一些皮毛！只能说是给予刚接触vuex的初学者一个参考与了解吧！有哪里不明白的或不对的，留言下，咱们可以一起讨论、共同学习！ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"vuex","slug":"vuex","permalink":"http://yoursite.com/categories/vuex/"}],"tags":[{"name":"-vuex","slug":"vuex","permalink":"http://yoursite.com/tags/vuex/"}]}]}