{"meta":{"title":"星空下的颗粒","subtitle":"流星的划过，留下那幻梦似般的轨迹，为了成为独当一面的·Web·前端工程师！","description":"让自己在这个博客里面记录自己的一些见解，一些在代码中的疑难以及收获。","author":"Ls-tomatoes","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-06-04T05:04:20.000Z","updated":"2019-06-15T01:09:25.254Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-06-04T05:01:12.000Z","updated":"2019-06-15T01:08:16.519Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2018-12-12T13:25:30.000Z","updated":"2019-06-15T01:10:20.470Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"garlly","date":"2019-06-15T02:34:03.000Z","updated":"2019-06-15T02:34:31.102Z","comments":true,"path":"garlly/index.html","permalink":"http://yoursite.com/garlly/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-06-04T05:03:49.000Z","updated":"2019-06-15T01:08:47.768Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"一步步让你认识Vuex","slug":"一步步让你认识Vuex","date":"2019-06-08T03:42:28.000Z","updated":"2019-06-15T03:44:01.264Z","comments":true,"path":"2019/06/08/yi-bu-bu-rang-ni-ren-shi-vuex/","link":"","permalink":"http://yoursite.com/2019/06/08/yi-bu-bu-rang-ni-ren-shi-vuex/","excerpt":"","text":"如图，Vuex看起来是一个仓库，一层一层得关系牵连，其实它就是一个专为vue.js管理得仓库。 一、为什么需要使用Vuex呢？​ 1、项目越写越大，功能越写越复杂，当vue.js应用程序遇到多个组件共享状态时，单向数据流得简洁性很容易被破坏。 ​ 2、组件之间通信很复杂得情况下 ​ 3、项目中使用了路由，并且路由页面组件中需要通信得时候。 ​ 4、项目遇到难点，写不下去得时候就该用vuex了。 二、Vuex的操作流程：​ 1、要先创建仓库，将我们项目中组件上需要恭喜的数据放置到我们仓库中state的位置/ ​ 2、组件要使用仓库中state的数据，就从仓库里面拿出来用。 ​ 3、要修改仓库中state的数据， ​ 1、commit(提交) mutation ​ 2、dispath（派发） action -> commit mutation ​ 4、然后仓库中state数据发生变化，组件就会得到更新 vuex的使用：​ 1、安装vuex npm install --save vuex ​ 2、项目src/store/index.js文件中创建仓库的实例对象 ​ 3、要main.js中new Vue实例的地方 配置一个store的选项，选项的值就是第二步中实例的对象。 三、如何将仓库中的数据拿到组件中去使用​ this.$store就是仓库的实例对象 ​ 1、直接使用this,$store的方式在组件template模板中使用（不推荐） ​ 2、组件中使用计算属性去拿仓库的数据 ​ 3、借助vuex提供的辅助函数mapState ​ mapState([ ])组件的Computed的key必须要跟State中的key一致 ​ mapState ({ })-组件的Computed的key可以自定义如 ​ 4、将组件自身的computed与State的computed结合 …为展开运算符 computed: { ...mapState(['title']), firstName () { return this.name.split('')[0] } }, 如何修改仓库中的数据 先需要在仓库中定义我们的mutation 在组件中提交这个mutaion this.$store.commit(‘mutaion的名字’, 要传递的参数) this.$store.commit({ type: mutaion的名字, 其余的参数 }) mapMutations 辅助函数 mutation不允许异步代码的 如何写异步代码在仓库中 actions 每一个action里面都可以写异步代码，但是action并不能修改state中的数据，真正修改数据的还是 mutaction 在组件中如何派发这个action this.$store.dispatch(‘action的名字’) mapActions 辅助函数 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"-vuex","slug":"vuex","permalink":"http://yoursite.com/tags/vuex/"}]}]}