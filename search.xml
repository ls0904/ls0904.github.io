<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一步步让你认识Vuex</title>
      <link href="/2019/06/08/yi-bu-bu-rang-ni-ren-shi-vuex/"/>
      <url>/2019/06/08/yi-bu-bu-rang-ni-ren-shi-vuex/</url>
      
        <content type="html"><![CDATA[<p><img src="%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%AE%A9%E4%BD%A0%E8%AE%A4%E8%AF%86Vuex%5Cvuex%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="vuex核心原理图"></p><p>如图，<code>Vuex</code>看起来是一个仓库，一层一层得关系牵连，其实它就是一个专为<code>vue.js</code>管理得仓库。</p><h3 id="一、为什么需要使用Vuex呢？"><a href="#一、为什么需要使用Vuex呢？" class="headerlink" title="一、为什么需要使用Vuex呢？"></a>一、为什么需要使用<code>Vuex</code>呢？</h3><p>​        1、项目越写越大，功能越写越复杂，当<code>vue.js</code>应用程序遇到多个组件共享状态时，单向数据流得简洁性很容易被破坏。</p><p>​        2、组件之间通信很复杂得情况下</p><p>​        3、项目中使用了路由，并且路由页面组件中需要通信得时候。</p><p>​        4、项目遇到难点，写不下去得时候就该用<code>vuex</code>了。</p><h3 id="二、Vuex的操作流程："><a href="#二、Vuex的操作流程：" class="headerlink" title="二、Vuex的操作流程："></a>二、<code>Vuex</code>的操作流程：</h3><p>​        1、要先创建仓库，将我们项目中组件上需要恭喜的数据放置到我们仓库中state的位置/</p><p>​        2、组件要使用仓库中state的数据，就从仓库里面拿出来用。</p><p>​        3、要修改仓库中state的数据，</p><p>​                    1、commit(提交) mutation</p><p>​                    2、dispath（派发） action -> commit mutation</p><p>​        4、然后仓库中state数据发生变化，组件就会得到更新</p><h4 id="vuex的使用："><a href="#vuex的使用：" class="headerlink" title="vuex的使用："></a><code>vuex</code>的使用：</h4><p>​                1、安装vuex <code>npm install --save vuex</code></p><p>​                2、项目<code>src/store/index.js</code>文件中创建仓库的实例对象</p><p>​                3、要<code>main.js中new Vue</code>实例的地方 配置一个<code>store</code>的选项，选项的值就是第二步中实例的对象。</p><h3 id="三、如何将仓库中的数据拿到组件中去使用"><a href="#三、如何将仓库中的数据拿到组件中去使用" class="headerlink" title="三、如何将仓库中的数据拿到组件中去使用"></a>三、如何将仓库中的数据拿到组件中去使用</h3><p>​     <code>this.$store</code>就是仓库的实例对象</p><p>​        1、直接使用this,$store的方式在组件template模板中使用（不推荐）</p><p>​        2、组件中使用计算属性去拿仓库的数据</p><p><img src="%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%AE%A9%E4%BD%A0%E8%AE%A4%E8%AF%86Vuex%5Cclipboard.png" alt="clipboard"></p><p>​        3、借助<code>vuex</code>提供的辅助函数<code>mapState</code></p><p>​                <code>mapState([ ])</code>组件的<code>Computed</code>的<code>key</code>必须要跟<code>State</code>中的<code>key</code>一致</p><p>​                <code>mapState ({ })</code>-组件的<code>Computed</code>的<code>key</code>可以自定义如</p><p>​        4、将组件自身的<code>computed</code>与<code>State</code>的<code>computed</code>结合        …为展开运算符</p><pre class=" language-vue"><code class="language-vue">computed: {  ...mapState(['title']),  firstName () {    return this.name.split('')[0]  }},</code></pre><h3 id="如何修改仓库中的数据"><a href="#如何修改仓库中的数据" class="headerlink" title="如何修改仓库中的数据"></a>如何修改仓库中的数据</h3><ol><li>先需要在仓库中定义我们的<code>mutation</code></li><li>在组件中提交这个<code>mutaion</code><ol><li><code>this.$store.commit</code>(‘mutaion的名字’, 要传递的参数)</li><li><code>this.$store.commit</code>({ type: mutaion的名字, 其余的参数 })</li><li><code>mapMutations</code> 辅助函数</li></ol></li><li><code>mutation</code>不允许异步代码的</li></ol><h3 id="如何写异步代码在仓库中-actions"><a href="#如何写异步代码在仓库中-actions" class="headerlink" title="如何写异步代码在仓库中 actions"></a>如何写异步代码在仓库中 actions</h3><ol><li>每一个action里面都可以写异步代码，但是action并不能修改state中的数据，真正修改数据的还是 mutaction</li><li>在组件中如何派发这个action<ol><li><code>this.$store.dispatch</code>(‘action的名字’)</li><li><code>mapActions</code> 辅助函数</li></ol></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> -vuex </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
